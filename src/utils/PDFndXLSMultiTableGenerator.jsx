// utils/ExportMultipleTables.js
import jsPDF from "jspdf";
import autoTable from "jspdf-autotable";
import * as XLSX from "xlsx";
import { saveAs } from "file-saver";
import imageBase64 from "../images/feeds-croped.png";
import QRCode from "qrcode";

export const handleExportMultiplePDF = async (tables, mainTitle = "Report") => {
  if (!tables || tables.length === 0) return;

  const user = JSON.parse(localStorage.getItem("user"));
  const doc = new jsPDF("p", "pt");
  const pageWidth = doc.internal.pageSize.getWidth();
  const pageHeight = doc.internal.pageSize.getHeight();

  const currentDate = new Date();
  const formattedDate = currentDate.toLocaleString("en-IN", {
    timeZone: "Asia/Kolkata",
    hour12: true,
  });

  const qrText = `Generated by : ${user?.name}\nEmployee Id : ${user?.employeeId}\nGenerated at: ${formattedDate}`;
  const qrBase64 = await QRCode.toDataURL(qrText);

  const drawFooterAndHeader = () => {
    const pageNumber = doc.internal.getCurrentPageInfo().pageNumber;
    const pageCount = doc.internal.getNumberOfPages();

    // HEADER
    if (imageBase64) {
      doc.addImage(imageBase64, "PNG", 40, 20, 70, 30); // logo left
    }
    if (qrBase64) {
      doc.addImage(qrBase64, "PNG", pageWidth - 80, 20, 50, 50); // QR right
    }

    doc.setFontSize(16);
    doc.setTextColor(0, 0, 0);
    doc.text(mainTitle, pageWidth / 2, 35, { align: "center" });

    doc.setFontSize(9);
    doc.setTextColor(80);
    doc.text(`Generated on: ${formattedDate}`, pageWidth / 2, 50, {
      align: "center",
    });

    // Divider line below header
    doc.setDrawColor(0);
    doc.setLineWidth(0.2);
    doc.line(40, 70, pageWidth - 40, 70);

    // FOOTER
    doc.setDrawColor(0);
    doc.setLineWidth(0.1);
    doc.line(40, pageHeight - 40, pageWidth - 40, pageHeight - 40);

    const footerLines = [
      "Registered Address : Flat No. 203, Mar Homes, Annojiguda, Pocharam, Korremal, Hyderabad, Telangana, India - 500088.",
      "This is an electronically generated document, no signature is required.",
    ];
    doc.setFontSize(8);
    footerLines.forEach((line, i) => {
      doc.setTextColor(150);
      doc.text(line, pageWidth / 2, pageHeight - 28 + i * 10, {
        align: "center",
      });
    });

    doc.setTextColor("#a92427");
    doc.text(
      "Â© Kernn Automations Private Limited",
      pageWidth / 2,
      pageHeight - 5,
      { align: "center" }
    );

    doc.setTextColor(0);
    doc.text(
      `Page ${pageNumber} of ${pageCount}`,
      pageWidth - 80,
      pageHeight - 10
    );
  };

  let startY = 90;
  for (let i = 0; i < tables.length; i++) {
    const { title, columns, data, grandTotal } = tables[i];

    // Add table title
    doc.setFontSize(13);
    doc.setTextColor(0);
    doc.text(title, 50, startY);
    startY += 10;

    const modifiedData = data.map((row) =>
      columns.map((col) => row[col] ?? "")
    );
    if (grandTotal !== null && grandTotal !== undefined) {
      const emptyCells = Array(columns.length - 2).fill("");
      modifiedData.push([
        ...emptyCells,
        "Grand Total :",
        grandTotal.toFixed(2),
      ]);
    }

    autoTable(doc, {
      headStyles: {
        fillColor: [0, 49, 118],
        textColor: [255, 255, 255],
        fontStyle: "bold",
        fontSize: 9,
      },
      bodyStyles: {
        textColor: [0, 0, 0],
        fontSize: 8,
      },
      head: [columns],
      body: modifiedData,
      startY: startY + 5,
      margin: { top: 70, bottom: 50 },
      didDrawPage: drawFooterAndHeader,
    });

    startY = doc.lastAutoTable.finalY + 20; // after this table ends
    if (i !== tables.length - 1 && startY > pageHeight - 100) {
      doc.addPage();
      startY = 90;
    }
  }

  doc.save(`${mainTitle}.pdf`);
};

export const handleExportMultipleExcel = (tables, mainTitle = "Report") => {
  const workbook = XLSX.utils.book_new();

  tables.forEach((table) => {
    const { title, columns, data } = table;
    const sheetData = [
      columns,
      ...data.map((row) => columns.map((col) => row[col] ?? "")),
    ];
    const worksheet = XLSX.utils.aoa_to_sheet(sheetData);
    XLSX.utils.book_append_sheet(workbook, worksheet, title.slice(0, 30)); // max 31 chars
  });

  const excelBuffer = XLSX.write(workbook, {
    bookType: "xlsx",
    type: "array",
  });
  const dataBlob = new Blob([excelBuffer], {
    type: "application/octet-stream",
  });
  saveAs(dataBlob, `${mainTitle}.xlsx`);
};

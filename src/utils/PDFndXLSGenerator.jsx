import jsPDF from "jspdf";
import autoTable from "jspdf-autotable";
import * as XLSX from "xlsx";
import { saveAs } from "file-saver";
import QRCode from "qrcode";
import imageBase64 from "../images/feeds-croped.png";

/**
 * ✅ EXPORT TO PDF
 */
export const handleExportPDF = async (columns, data, title, grandTotal = null) => {
  if (!data || data.length === 0) return;

  const user = JSON.parse(localStorage.getItem("user"));
  const doc = new jsPDF();
  const pageWidth = doc.internal.pageSize.getWidth();
  const pageHeight = doc.internal.pageSize.getHeight();

  const currentDate = new Date();
  const formattedDate = currentDate.toLocaleString("en-IN", {
    timeZone: "Asia/Kolkata",
    hour12: true,
  });

  const qrText = `Generated by : ${user?.name}\nEmployee Id : ${user?.employeeId}\nGenerated at: ${formattedDate}`;
  const qrBase64 = await QRCode.toDataURL(qrText);

  // Prepare table data
  const modifiedColumns = [...columns];
  const modifiedData = data.map((row) => columns.map((col) => row[col] ?? ""));

  // Add grand total row if applicable
  if (grandTotal !== null) {
    const emptyCells = Array(modifiedColumns.length - 2).fill("");
    // Ensure grandTotal is a number before calling toFixed
    const totalValue = typeof grandTotal === 'number' ? grandTotal : parseFloat(grandTotal) || 0;
    modifiedData.push([...emptyCells, "Grand Total :", totalValue.toFixed(2)]);
  }

  // Draw Header + Footer
  const drawFooterAndHeader = () => {
    const pageNumber = doc.internal.getCurrentPageInfo().pageNumber;
    const pageCount = doc.internal.getNumberOfPages();

    // Header
    if (imageBase64) doc.addImage(imageBase64, "PNG", 10, 10, 40, 20);
    if (qrBase64) doc.addImage(qrBase64, "PNG", pageWidth - 45, 10, 30, 30);

    doc.setFontSize(14);
    doc.text(title, pageWidth / 2, 20, { align: "center" });

    doc.setFontSize(9);
    doc.setTextColor(80);
    doc.text(`Generated on: ${formattedDate}`, pageWidth / 2, 27, { align: "center" });

    // Divider
    doc.setDrawColor(0);
    doc.line(10, 40, pageWidth - 10, 40);

    // Footer
    doc.setLineWidth(0.1);
    doc.line(10, pageHeight - 30, pageWidth - 10, pageHeight - 30);

    const footerLines = [
      "Registered Address : Flat No. 203, Mar Homes, Annojiguda, Pocharam, Korremal, Hyderabad, Telangana, India - 500088.",
      "This is an electronically generated document, no signature is required.",
    ];

    doc.setFontSize(8);
    footerLines.forEach((line, i) => {
      doc.setTextColor(150);
      doc.text(line, pageWidth / 2, pageHeight - 22 + i * 4, { align: "center" });
    });

    doc.setTextColor("#a92427");
    doc.text("© Kernn Automations Private Limited", pageWidth / 2, pageHeight - 12, {
      align: "center",
    });

    doc.setTextColor(0);
    doc.text(`Page ${pageNumber} of ${pageCount}`, pageWidth - 40, pageHeight - 6);
  };

  // Generate Table
  autoTable(doc, {
    headStyles: {
      fillColor: [0, 49, 118],
      textColor: [255, 255, 255],
      fontStyle: "bold",
      fontSize: 8,
    },
    bodyStyles: { textColor: [0, 0, 0], fontSize: 7 },
    head: [modifiedColumns],
    body: modifiedData,
    margin: { top: 50, bottom: 40 },
    startY: 50,
    didDrawPage: drawFooterAndHeader,
  });

  doc.save(`${title}.pdf`);
};

/**
 * ✅ EXPORT TO EXCEL (.xlsx)
 * Includes bold + colored header styling
 */
export const handleExportExcel = (columns, data, title) => {
  if (!data || data.length === 0) return;

  // Step 1: Prepare 2D array (rows)
  const worksheetData = [
    columns,
    ...data.map((row) => columns.map((col) => row[col] ?? "")),
  ];

  // Step 2: Create worksheet
  const worksheet = XLSX.utils.aoa_to_sheet(worksheetData);

  // Step 3: Apply bold style to header cells
  columns.forEach((_, index) => {
    const cellAddress = XLSX.utils.encode_cell({ r: 0, c: index });
    if (!worksheet[cellAddress]) return;

    worksheet[cellAddress].s = {
      font: { bold: true, color: { rgb: "FFFFFF" } },
      fill: { fgColor: { rgb: "305496" } }, // Blue background
      alignment: { horizontal: "center", vertical: "center" },
    };
  });

  // Step 4: Auto-adjust column widths
  const colWidths = columns.map((col) => ({
    wch: Math.max(col.length + 2, 15), // Auto width based on name length
  }));
  worksheet["!cols"] = colWidths;

  // Step 5: Create workbook and save
  const workbook = XLSX.utils.book_new();
  XLSX.utils.book_append_sheet(workbook, worksheet, "Sheet1");

  const excelBuffer = XLSX.write(workbook, {
    bookType: "xlsx",
    type: "array",
    cellStyles: true,
  });

  const dataBlob = new Blob([excelBuffer], { type: "application/octet-stream" });
  saveAs(dataBlob, `${title}.xlsx`);
};

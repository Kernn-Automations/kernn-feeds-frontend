// PDFndXLSCode.js
import jsPDF from "jspdf";
import autoTable from "jspdf-autotable";
import * as XLSX from "xlsx";
import QRCode from "qrcode";
import imageBase64 from "@/images/feeds-croped.png";

// ---------- EXCEL EXPORT ----------
export const exportToExcel = (selectedNames, reportData) => {
  if (!reportData || !reportData.dateWise) return;

  const firstRow = ["S.No", "Date"];
  selectedNames.forEach((name) => {
    firstRow.push(`${name} Qty`, `${name} Increase`, `${name} Decrease`, `${name} Accumulated`);
  });

  const bodyRows = reportData.dateWise.map((day, index) => {
    const row = [index + 1, day.date];
    selectedNames.forEach((name) => {
      row.push(day[name] ?? 0);
      row.push(reportData.increase?.[name]?.[day.date] ?? 0);
      row.push(reportData.decrease?.[name]?.[day.date] ?? 0);
      row.push(reportData.accumulation?.[name]?.[day.date] ?? 0);
    });
    return row;
  });

  const ws = XLSX.utils.aoa_to_sheet([firstRow, ...bodyRows]);
  const wb = XLSX.utils.book_new();
  XLSX.utils.book_append_sheet(wb, ws, "Report");
  XLSX.writeFile(wb, "EmployeeComparisonReport.xlsx");
};

// ---------- PDF EXPORT ----------
export const exportToPDF = async (selectedNames, reportData) => {
  if (!reportData || !reportData.dateWise) return;

  const user = JSON.parse(localStorage.getItem("user"));
  const doc = new jsPDF("l", "pt", "a4");
  const pageWidth = doc.internal.pageSize.getWidth();
  const pageHeight = doc.internal.pageSize.getHeight();
  const currentDate = new Date();
  const formattedDate = currentDate.toLocaleString("en-IN", { timeZone: "Asia/Kolkata", hour12: true });
  const qrText = `Generated by : ${user?.name}\nEmployee Id : ${user?.employeeId}\nGenerated at: ${formattedDate}`;
  const qrBase64 = await QRCode.toDataURL(qrText);

  // Build head rows
  const firstRow = [
    { content: "S.No", rowSpan: 2, styles: { halign: "center", valign: "middle" } },
    { content: "Date", rowSpan: 2, styles: { halign: "center", valign: "middle" } },
  ];
  selectedNames.forEach((name) => {
    firstRow.push({ content: name, colSpan: 4, styles: { halign: "center", valign: "middle" } });
  });

  const secondRow = [];
  selectedNames.forEach(() => {
    secondRow.push({ content: "Qty", styles: { halign: "center" } });
    secondRow.push({ content: "Increase", styles: { halign: "center" } });
    secondRow.push({ content: "Decrease", styles: { halign: "center" } });
    secondRow.push({ content: "Accumulated", styles: { halign: "center" } });
  });

  // Body rows
  const bodyRows = reportData.dateWise.map((day, index) => {
    const row = [index + 1, day.date];
    selectedNames.forEach((name) => {
      row.push(day[name] ?? 0);
      row.push(reportData.increase?.[name]?.[day.date] ?? 0);
      row.push(reportData.decrease?.[name]?.[day.date] ?? 0);
      row.push(reportData.accumulation?.[name]?.[day.date] ?? 0);
    });
    return row;
  });

  const drawHeaderFooter = (data) => {
    const pageNumber = doc.internal.getCurrentPageInfo().pageNumber;
    const pageCount = doc.internal.getNumberOfPages();

    // HEADER
    if (imageBase64) doc.addImage(imageBase64, "PNG", 10, 10, 40, 20);
    if (qrBase64) doc.addImage(qrBase64, "PNG", pageWidth - 45, 10, 30, 30);

    doc.setFontSize(14);
    doc.setTextColor(0, 0, 0);
    doc.text("Employee Comparison Report", pageWidth / 2, 20, { align: "center" });

    // doc.setFontSize(9);
    // doc.setTextColor(80);
    // doc.text(`Generated on: ${formattedDate}`, pageWidth / 2, 27, { align: "center" });

    doc.setDrawColor(0);
    doc.setLineWidth(0.2);
    doc.line(10, 40, pageWidth - 10, 40);

    // FOOTER
    doc.setDrawColor(0);
    doc.setLineWidth(0.1);
    doc.line(10, pageHeight - 30, pageWidth - 10, pageHeight - 30);

    const footerLines = [
      "",
      "",
    ];
    doc.setFontSize(8);
    footerLines.forEach((line, i) => {
      doc.setTextColor(150);
      doc.text(line, pageWidth / 2, pageHeight - 22 + i * 4, { align: "center" });
    });

    doc.setTextColor("#a92427");
    doc.text("Â© Kernn Automations Private Limited", pageWidth / 2, pageHeight - 22 + footerLines.length * 4, { align: "center" });

    doc.setTextColor(0);
    doc.text(`Page ${pageNumber} of ${pageCount}`, pageWidth - 40, pageHeight - 10);
  };

  autoTable(doc, {
    head: [firstRow, secondRow],
    body: bodyRows,
    startY: 50,
    theme: "grid",
    styles: { fontSize: 8, halign: "center", valign: "middle" },
    headStyles: { fillColor: [0, 51, 102], textColor: 255, halign: "center", valign: "middle" },
    didDrawPage: drawHeaderFooter,
    margin: { top: 50, bottom: 40 },
    tableWidth: "auto",
  });

  doc.save("EmployeeComparisonReport.pdf");
};
